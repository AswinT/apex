<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <!-- SweetAlert2 CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.min.css">
    <style>
        /* Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f9f9f9;
        }

        a {
            text-decoration: none;
            color: inherit;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        /* Header Styles */
        header {
            background-color: #fff;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 0;
        }

        .logo {
            font-size: 24px;
            font-weight: 700;
            color: #2c3e50;
        }

        .logo span {
            color: #e74c3c;
        }

        .nav-menu {
            display: flex;
            list-style: none;
        }

        .nav-item {
            margin-left: 30px;
            font-weight: 500;
        }

        .nav-item a:hover {
            color: #e74c3c;
        }

        .nav-item.active a {
            color: #e74c3c;
        }

        .user-actions {
            display: flex;
            align-items: center;
        }

        .cart-icon, .user-icon {
            position: relative;
            margin-left: 20px;
            font-size: 20px;
            cursor: pointer;
        }

        .cart-count {
            position: absolute;
            top: -8px;
            right: -8px;
            background-color: #e74c3c;
            color: white;
            font-size: 12px;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Breadcrumbs */
        .breadcrumbs {
            display: flex;
            padding: 15px 0;
            margin-bottom: 20px;
            list-style: none;
        }

        .breadcrumbs li {
            display: flex;
            align-items: center;
        }

        .breadcrumbs li:not(:last-child)::after {
            content: '›';
            margin: 0 10px;
            color: #777;
        }

        .breadcrumbs a:hover {
            color: #e74c3c;
        }

        /* Product Detail */
        .product-detail {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 50px;
            margin-bottom: 60px;
        }

        /* Product Gallery */
        .product-gallery {
            position: relative;
        }

        .main-image-container {
            position: relative;
            width: 100%;
            height: 400px;
            border-radius: 8px;
            overflow: hidden;
            margin-bottom: 15px;
            background: #f8f8f8;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            cursor: crosshair;
        }

        .main-image {
            width: 100%;
            height: 100%;
            object-fit: contain;
            transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            transform-origin: center center;
        }

        /* Modern Magnifier Lens */
        .magnifier-lens {
            position: absolute;
            width: 150px;
            height: 150px;
            border: 3px solid rgba(255, 255, 255, 0.8);
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(2px);
            box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1), 0 8px 32px rgba(0, 0, 0, 0.2);
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.3s ease;
            z-index: 10;
        }

        .magnifier-lens.active {
            opacity: 1;
        }

        /* Zoom Preview Panel */
        .zoom-preview {
            position: absolute;
            top: 0;
            left: calc(100% + 20px);
            width: 400px;
            height: 500px;
            background: #fff;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 16px 64px rgba(0, 0, 0, 0.15);
            opacity: 0;
            transform: translateX(-20px);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            pointer-events: none;
            z-index: 20;
        }

        .zoom-preview.active {
            opacity: 1;
            transform: translateX(0);
        }

        .zoom-preview-image {
            width: 800px;
            height: 1000px;
            object-fit: contain;
            transition: transform 0.1s ease-out;
            transform-origin: top left;
        }

        /* Zoom Controls */
        .zoom-controls {
            position: absolute;
            bottom: 20px;
            right: 20px;
            display: flex;
            gap: 8px;
            z-index: 15;
        }

        .zoom-btn {
            width: 44px;
            height: 44px;
            background: rgba(255, 255, 255, 0.95);
            border: none;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 18px;
            color: #333;
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .zoom-btn:hover {
            background: #fff;
            transform: scale(1.1);
            box-shadow: 0 6px 24px rgba(0, 0, 0, 0.15);
        }

        .zoom-btn:active {
            transform: scale(0.95);
        }

        /* Fullscreen Modal */
        .fullscreen-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0, 0, 0, 0.95);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            backdrop-filter: blur(5px);
        }

        .fullscreen-modal.active {
            display: flex;
        }

        .fullscreen-content {
            position: relative;
            max-width: 90vw;
            max-height: 90vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .fullscreen-image {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
            cursor: zoom-in;
            transition: transform 0.3s ease;
        }

        .fullscreen-image.zoomed {
            cursor: zoom-out;
        }

        .fullscreen-controls {
            position: absolute;
            top: 20px;
            right: 20px;
            display: flex;
            gap: 10px;
        }

        .fullscreen-btn {
            width: 50px;
            height: 50px;
            background: rgba(255, 255, 255, 0.9);
            border: none;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 20px;
            color: #333;
            transition: all 0.3s ease;
        }

        .fullscreen-btn:hover {
            background: #fff;
            transform: scale(1.1);
        }

        .thumbnail-container {
            display: flex;
            gap: 10px;
            overflow-x: auto;
            padding-bottom: 5px;
        }

        .thumbnail {
            width: 80px;
            height: 80px;
            border-radius: 5px;
            overflow: hidden;
            cursor: pointer;
            border: 2px solid transparent;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #f8f8f8;
        }

        .thumbnail img {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
        }

        .thumbnail.active {
            border-color: #007bff;
            box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.3);
        }

        /* Zoom Indicator */
        .zoom-indicator {
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 8px 12px;
            border-radius: 20px;
            font-size: 12px;
            display: flex;
            align-items: center;
            gap: 6px;
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
        }

        .zoom-indicator.show {
            opacity: 1;
        }

        /* Product Info */
        .product-info {
            display: flex;
            flex-direction: column;
        }

        .product-category {
            font-size: 14px;
            color: #777;
            margin-bottom: 5px;
        }

        .product-title {
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 15px;
            color: #2c3e50;
        }

        .product-brand {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }

        .brand-label {
            font-weight: 500;
            margin-right: 5px;
        }

        .product-rating {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .stars {
            color: #f39c12;
            margin-right: 5px;
        }

        .filled-star {
            color: #f39c12;
        }

        .empty-star {
            color: #ddd;
        }

        .review-count {
            color: #777;
        }

        .product-price {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .current-price {
            font-size: 24px;
            font-weight: 700;
            color: #e74c3c;
        }

        .original-price {
            font-size: 18px;
            text-decoration: line-through;
            color: #999;
            margin-left: 10px;
        }

        .product-stock {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 4px;
            font-weight: 500;
            margin-bottom: 20px;
        }

        .in-stock {
            background-color: #e3f8e3;
            color: #2ecc71;
        }

        .low-stock {
            background-color: #fef5e6;
            color: #f39c12;
        }

        .out-of-stock {
            background-color: #fde8e8;
            color: #e74c3c;
        }

        .product-description {
            margin-bottom: 20px;
            line-height: 1.8;
        }

        .add-to-cart-section {
            display: flex;
            align-items: center;
            margin-bottom: 30px;
        }

        .quantity-control {
            display: flex;
            align-items: center;
            margin-right: 15px;
        }

        .quantity-btn {
            width: 30px;
            height: 30px;
            background-color: #f5f5f5;
            border: 1px solid #ddd;
            font-size: 16px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .quantity-input {
            width: 50px;
            height: 30px;
            border: 1px solid #ddd;
            text-align: center;
            margin: 0 5px;
        }

        .add-to-cart {
            flex-grow: 1;
            padding: 12px 30px;
            background-color: #e74c3c;
            color: white;
            border: none;
            border-radius: 4px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .add-to-cart:hover {
            background-color: #c0392b;
        }

        .add-to-cart:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }

        /* Product Tabs */
        .product-tabs {
            margin-bottom: 40px;
        }

        .tabs-header {
            display: flex;
            border-bottom: 1px solid #ddd;
            margin-bottom: 20px;
        }

        .tab-btn {
            padding: 15px 25px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
            position: relative;
            user-select: none;
            background: none;
            border: none;
            outline: none;
            font-size: 16px;
            color: inherit;
        }

        .tab-btn:hover {
            color: #e74c3c;
        }

        .tab-btn.active {
            color: #e74c3c;
            position: relative;
            font-weight: 600;
        }

        .tab-btn.active::after {
            content: '';
            position: absolute;
            bottom: -1px;
            left: 0;
            width: 100%;
            height: 3px;
            background-color: #e74c3c;
        }

        .tab-content {
            display: none;
            padding: 30px;
            background-color: #fff;
            border-radius: 0 0 8px 8px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            margin-bottom: 20px;
        }

        .tab-section-title {
            font-size: 20px;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }

        /* Specifications */
        .specs-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 15px;
        }

        .spec-item {
            display: flex;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }

        .spec-name {
            font-weight: 500;
            width: 40%;
            color: #777;
        }

        .spec-value {
            width: 60%;
        }

        /* Features */
        .features-list {
            list-style-type: disc;
            padding-left: 20px;
        }

        .feature-item {
            margin-bottom: 10px;
            display: flex;
            align-items: flex-start;
        }

        .feature-item:before {
            content: '✓';
            color: #2ecc71;
            margin-right: 10px;
        }

        /* Reviews */
        .review-summary {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .review-count-display {
            font-size: 16px;
            font-weight: 500;
            margin-right: 15px;
        }

        .review-rating-display {
            display: flex;
            align-items: center;
        }

        .no-reviews-message {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 25px;
            color: #666;
        }

        /* Related Products */
        .related-products {
            margin-bottom: 60px;
        }

        .section-title {
            font-size: 24px;
            margin-bottom: 20px;
            color: #2c3e50;
            position: relative;
            padding-bottom: 10px;
        }

        .section-title:after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 50px;
            height: 3px;
            background-color: #e74c3c;
        }

        .related-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
        }

        .product-card {
            background-color: #fff;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            transition: transform 0.3s, box-shadow 0.3s;
        }

        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.12);
        }

        .product-image {
            height: 180px;
            overflow: hidden;
        }

        .product-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.5s;
        }

        .product-card:hover .product-image img {
            transform: scale(1.05);
        }

        .product-content {
            padding: 15px;
        }

        .product-card .product-title {
            font-size: 16px;
            margin-bottom: 8px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        /* Responsive */
        @media (max-width: 1200px) {
            .zoom-preview {
                display: none;
            }
        }

        @media (max-width: 992px) {
            .product-detail {
                grid-template-columns: 1fr;
                gap: 30px;
            }

            .main-image-container {
                height: 350px;
            }
        }

        @media (max-width: 768px) {
            .nav-menu {
                display: none;
            }

            .specs-list {
                grid-template-columns: 1fr;
            }

            .related-grid {
                grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            }

            .main-image-container {
                height: 300px;
            }

            .magnifier-lens {
                width: 100px;
                height: 100px;
            }
        }

        @media (max-width: 576px) {
            .tabs-header {
                flex-wrap: wrap;
            }

            .tab-btn {
                padding: 8px 15px;
                font-size: 14px;
            }

            .product-title {
                font-size: 24px;
            }

            .add-to-cart-section {
                flex-direction: column;
                align-items: stretch;
            }

            .quantity-control {
                margin-right: 0;
                margin-bottom: 15px;
                justify-content: center;
            }
        }

        /* Enhanced Rating Styles */
        .product-rating {
            display: flex;
            align-items: center;
            margin: 15px 0;
        }

        .stars {
            display: flex;
            align-items: center;
            margin-right: 10px;
        }

        .stars .filled-star {
            color: #FFD700;
            font-size: 22px;
        }

        .stars .empty-star {
            color: #e0e0e0;
            font-size: 22px;
        }

        .stars .half-star {
            position: relative;
            font-size: 22px;
        }

        .stars .half-star .half {
            position: absolute;
            overflow: hidden;
            width: 50%;
            color: #FFD700;
        }

        .stars .half-star .base {
            color: #e0e0e0;
        }

        .review-count {
            color: #666;
            font-size: 14px;
        }

        /* Reviews Styling */
        .reviews-container {
            padding: 20px 0;
        }

        .review-summary {
            display: flex;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 15px;
            border-bottom: 1px solid #eaeaea;
        }

        .review-count-display {
            font-size: 18px;
            font-weight: 600;
            margin-right: 15px;
        }

        .review-rating-display {
            display: flex;
            align-items: center;
        }

        .review-list {
            margin-bottom: 40px;
        }

        .review-item {
            padding: 15px 0;
            border-bottom: 1px solid #eaeaea;
        }

        .review-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .reviewer-name {
            font-weight: 600;
            font-size: 16px;
        }

        .review-date {
            color: #777;
            font-size: 14px;
        }

        .review-rating {
            margin-bottom: 8px;
        }

        .review-title {
            font-weight: 600;
            margin-bottom: 5px;
            font-size: 16px;
        }

        .review-text {
            line-height: 1.5;
            color: #444;
        }

        /* Review Form Styling */
        .review-form-container {
            background-color: #f9f9f9;
            padding: 25px;
            border-radius: 8px;
            margin-top: 30px;
        }

        .review-form-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 20px;
            color: #333;
        }

        .review-form {
            display: flex;
            flex-direction: column;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
            color: #555;
        }

        .form-control {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }

        textarea.form-control {
            min-height: 100px;
            resize: vertical;
        }

        .rating-select {
            display: flex;
            flex-direction: row-reverse;
            justify-content: flex-end;
        }

        .rating-select input {
            display: none;
        }

        .rating-select label {
            cursor: pointer;
            font-size: 25px;
            color: #e0e0e0;
            margin-right: 5px;
        }

        .rating-select label:hover,
        .rating-select label:hover ~ label,
        .rating-select input:checked ~ label {
            color: #FFD700;
        }

        .submit-review-btn {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 4px;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.2s;
            align-self: flex-start;
            margin-top: 10px;
        }

        .submit-review-btn:hover {
            background-color: #0069d9;
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header>
        <div class="container header-container">
            <a href="/" class="logo">APEX<span>.</span></a>
            <nav>
                <ul class="nav-menu">
                    <li class="nav-item"><a href="/">Home</a></li>
                    <li class="nav-item active"><a href="/headphones">Headphones</a></li>
                    <li class="nav-item"><a href="/about">About Us</a></li>
                    <li class="nav-item"><a href="/contact">Contact</a></li>
                </ul>
            </nav>
            <div class="user-actions">
                <div class="cart-icon">
                    🛒
                    <span class="cart-count">0</span>
                </div>
                <% if (user) { %>
                    <a href="/account" class="user-icon">👤</a>
                <% } else { %>
                    <a href="/login" class="user-icon">🔑</a>
                <% } %>
            </div>
        </div>
    </header>

    <div class="container">
        <!-- Breadcrumbs -->
        <ul class="breadcrumbs">
            <li><a href="/">Home</a></li>
            <li><a href="/headphones">Headphones</a></li>
            <li><a href="/headphones?category=<%= product.category._id %>"><%= product.category.name %></a></li>
            <li><%= product.name %></li>
        </ul>

        <!-- Product Detail -->
        <div class="product-detail">
            <!-- Modern Product Gallery -->
            <div class="product-gallery">
                <div class="main-image-container" id="mainImageContainer">
                    <img src="<%= product.images && product.images.length ? product.images[0] : '/img/product-placeholder.jpg' %>"
                         alt="<%= product.name %>"
                         class="main-image"
                         id="mainImage">

                    <!-- Magnifier Lens -->
                    <div class="magnifier-lens" id="magnifierLens"></div>

                    <!-- Zoom Indicator -->
                    <div class="zoom-indicator" id="zoomIndicator">
                        <span>🔍</span>
                        <span>Hover to zoom</span>
                    </div>

                    <!-- Zoom Controls -->
                    <div class="zoom-controls">
                        <button class="zoom-btn" id="zoomInBtn" title="Zoom In">+</button>
                        <button class="zoom-btn" id="zoomOutBtn" title="Zoom Out">-</button>
                        <button class="zoom-btn" id="fullscreenBtn" title="Fullscreen">⛶</button>
                    </div>
                </div>

                <!-- Zoom Preview Panel -->
                <div class="zoom-preview" id="zoomPreview">
                    <img src="<%= product.images && product.images.length ? product.images[0] : '/img/product-placeholder.jpg' %>"
                         alt="Zoomed Preview"
                         class="zoom-preview-image"
                         id="zoomPreviewImage">
                </div>

                <!-- Thumbnail Navigation -->
                <div class="thumbnail-container">
                    <% product.images.forEach((image, index) => { %>
                        <div class="thumbnail <%= index === 0 ? 'active' : '' %>"
                             data-index="<%= index %>"
                             data-src="<%= image %>"
                             data-zoom="<%= image %>">
                            <img src="<%= image %>" alt="<%= product.name %> thumbnail">
                        </div>
                    <% }); %>
                </div>
            </div>

            <!-- Product Info -->
            <div class="product-info">
                <div class="product-category"><%= product.category.name %></div>
                <h1 class="product-title"><%= product.name %></h1>
                <div class="product-brand">
                    <span class="brand-label">Brand:</span> <%= product.brand %>
                </div>
                <div class="product-rating">
                    <div class="stars">
                        <% for(let i = 1; i <= 5; i++) { %>
                            <% if (i <= Math.round(product.averageRating || 0)) { %>
                                ★
                            <% } else { %>
                                <span style="color: #ddd;">★</span>
                            <% } %>
                        <% } %>
                    </div>
                    <div class="review-count"><%= product.reviewCount || 0 %> reviews</div>
                </div>
                <div class="product-price">
                    <% if (product.salePrice && product.salePrice < product.price) { %>
                        <div class="current-price">₹<%= product.salePrice.toFixed(2) %></div>
                        <div class="original-price">₹<%= product.price.toFixed(2) %></div>
                    <% } else { %>
                        <div class="current-price">₹<%= product.price.toFixed(2) %></div>
                    <% } %>
                </div>
                <% if (product.stockQuantity > 10) { %>
                    <div class="product-stock in-stock">In Stock</div>
                <% } else if (product.stockQuantity > 0) { %>
                    <div class="product-stock low-stock">Low Stock (Only <%= product.stockQuantity %> left)</div>
                <% } else { %>
                    <div class="product-stock out-of-stock">Sold Out</div>
                <% } %>
                <div class="product-description">
                    <%= product.description %>
                </div>
                <div class="add-to-cart-section">
                    <div class="quantity-control">
                        <button class="quantity-btn decrease-quantity">-</button>
                        <input type="number" class="quantity-input" value="1" min="1" max="<%= product.stockQuantity %>" <%= product.stockQuantity === 0 ? 'disabled' : '' %>>
                        <button class="quantity-btn increase-quantity">+</button>
                    </div>
                    <button class="add-to-cart" data-product-id="<%= product._id %>" <%= product.stockQuantity === 0 ? 'disabled' : '' %>>
                        <%= product.stockQuantity === 0 ? 'Sold Out' : 'Add to Cart' %>
                    </button>
                </div>
            </div>
        </div>

        <!-- Product Tabs -->
        <div class="product-tabs">
            <div class="tabs-header">
                <button class="tab-btn active" data-tab="specifications" onclick="return showTab('specifications');">Specifications</button>
                <button class="tab-btn" data-tab="features" onclick="return showTab('features');">Features</button>
                <button class="tab-btn" data-tab="reviews" onclick="return showTab('reviews');">Reviews</button>
            </div>
            <div class="tab-content active" id="specifications">
                <h3 class="tab-section-title">Technical Specifications</h3>
                <% if (product.specifications && product.specifications.length > 0) { %>
                    <div class="specs-list">
                        <% product.specifications.forEach(spec => { %>
                            <div class="spec-item">
                                <div class="spec-name"><%= spec.name %></div>
                                <div class="spec-value"><%= spec.value %></div>
                            </div>
                        <% }); %>
                    </div>
                <% } else { %>
                    <p>No specifications available for this product.</p>
                <% } %>
            </div>
            <div class="tab-content" id="features">
                <h3 class="tab-section-title">Product Features</h3>
                <% if (product.features && product.features.length > 0) { %>
                    <ul class="features-list">
                        <% product.features.forEach(feature => { %>
                            <li class="feature-item"><%= feature %></li>
                        <% }); %>
                    </ul>
                <% } else { %>
                    <p>No features listed for this product.</p>
                <% } %>
            </div>
            <div class="tab-content" id="reviews">
                <div class="reviews-container">
                    <h3 class="tab-section-title">Customer Reviews</h3>
                    <div class="review-summary">
                        <div class="review-count-display"><%= product.reviewCount || 0 %> Reviews</div>
                        <div class="review-rating-display">
                            <div class="stars">
                                <%
                                    const avgRating = product.averageRating || 0;
                                    for (let i = 1; i <= 5; i++) {
                                        if (i <= Math.floor(avgRating)) {
                                %>
                                            <span class="filled-star">★</span>
                                <% } else if (i - 0.5 <= avgRating && avgRating < i) { %>
                                        <span class="half-star">
                                            <span class="half">★</span>
                                            <span class="base">★</span>
                                        </span>
                                <% } else { %>
                                        <span class="empty-star">★</span>
                                <% } %>
                                <% } %>
                                <span class="rating-value">(<%= avgRating.toFixed(1) %>)</span>
                            </div>
                        </div>
                    </div>
                    <div class="review-list">
                        <% if (product.reviews && product.reviews.length > 0) { %>
                            <% product.reviews.forEach(review => { %>
                                <div class="review-item">
                                    <div class="review-header">
                                        <div class="reviewer-name"><%= review.name %></div>
                                        <div class="review-date"><%= new Date(review.date).toLocaleDateString('en-IN Banking', { year: 'numeric', month: 'long', day: 'numeric' }) %></div>
                                    </div>
                                    <div class="review-rating">
                                        <div class="stars">
                                            <% for (let i = 1; i <= 5; i++) { %>
                                                <% if (i <= review.rating) { %>
                                                    <span class="filled-star">★</span>
                                                <% } else { %>
                                                    <span class="empty-star">★</span>
                                                <% } %>
                                            <% } %>
                                        </div>
                                    </div>
                                    <% if (review.title) { %>
                                        <div class="review-title"><%= review.title %></div>
                                    <% } %>
                                    <div class="review-text"><%= review.comment %></div>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <div class="no-reviews">
                                <p>This product has no reviews yet. Be the first to write a review!</p>
                            </div>
                        <% } %>
                    </div>
                    <div class="review-form-container">
                        <h3 class="review-form-title">Write a Review</h3>
                        <form class="review-form" id="reviewForm">
                            <input type="hidden" name="productId" value="<%= product._id %>">
                            <div class="form-group">
                                <label for="reviewerName">Your Name</label>
                                <input type="text" id="reviewerName" name="name" class="form-control" required>
                            </div>
                            <div class="form-group">
                                <label>Rating</label>
                                <div class="rating-select">
                                    <input type="radio" id="star5" name="rating" value="5" required>
                                    <label for="star5" title="5 stars">★</label>
                                    <input type="radio" id="star4" name="rating" value="4">
                                    <label for="star4" title="4 stars">★</label>
                                    <input type="radio" id="star3" name="rating" value="3">
                                    <label for="star3" title="3 stars">★</label>
                                    <input type="radio" id="star2" name="rating" value="2">
                                    <label for="star2" title="2 stars">★</label>
                                    <input type="radio" id="star1" name="rating" value="1">
                                    <label for="star1" title="1 star">★</label>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="reviewTitle">Review Title (Optional)</label>
                                <input type="text" id="reviewTitle" name="title" class="form-control">
                            </div>
                            <div class="form-group">
                                <label for="reviewComment">Your Review</label>
                                <textarea id="reviewComment" name="comment" class="form-control" required></textarea>
                            </div>
                            <button type="submit" class="submit-review-btn">Submit Review</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Related Products -->
        <div class="related-products">
            <h2 class="section-title">Related Products</h2>
            <% if (relatedProducts && relatedProducts.length > 0) { %>
                <div class="related-grid">
                    <% relatedProducts.forEach(relatedProduct => { %>
                        <div class="product-card">
                            <div class="product-image">
                                <img src="<%= relatedProduct.images[0] %>" alt="<%= relatedProduct.name %>">
                            </div>
                            <div class="product-content">
                                <h3 class="product-title">
                                    <a href="/headphones/<%= relatedProduct._id %>"><%= relatedProduct.name %></a>
                                </h3>
                                <div class="product-price">
                                    <% if (relatedProduct.salePrice && relatedProduct.salePrice < relatedProduct.price) { %>
                                        <div class="current-price">₹<%= relatedProduct.salePrice.toFixed(2) %></div>
                                        <div class="original-price">₹<%= relatedProduct.price.toFixed(2) %></div>
                                    <% } else { %>
                                        <div class="current-price">₹<%= relatedProduct.price.toFixed(2) %></div>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                </div>
            <% } else { %>
                <p>No related products found.</p>
            <% } %>
        </div>
    </div>

    <!-- Fullscreen Modal -->
    <div class="fullscreen-modal" id="fullscreenModal">
        <div class="fullscreen-content">
            <img src="" alt="Fullscreen Image" class="fullscreen-image" id="fullscreenImage">
            <div class="fullscreen-controls">
                <button class="fullscreen-btn" id="closeFullscreen" title="Close">✕</button>
            </div>
        </div>
    </div>

    <script>
        // Modern Product Zoomer Class
        class ModernProductZoomer {
            constructor() {
                this.currentImageIndex = 0;
                this.zoomLevel = 1;
                this.maxZoom = 3;
                this.minZoom = 1;
                this.isZooming = false;
                this.fullscreenZoomLevel = 1;

                this.initElements();
                this.bindEvents();
                this.loadImages();
            }

            initElements() {
                this.mainImageContainer = document.getElementById("mainImageContainer");
                this.mainImage = document.getElementById("mainImage");
                this.magnifierLens = document.getElementById("magnifierLens");
                this.zoomPreview = document.getElementById("zoomPreview");
                this.zoomPreviewImage = document.getElementById("zoomPreviewImage");
                this.zoomIndicator = document.getElementById("zoomIndicator");
                this.thumbnails = document.querySelectorAll(".thumbnail");
                this.fullscreenModal = document.getElementById("fullscreenModal");
                this.fullscreenImage = document.getElementById("fullscreenImage");
                this.zoomInBtn = document.getElementById("zoomInBtn");
                this.zoomOutBtn = document.getElementById("zoomOutBtn");
                this.fullscreenBtn = document.getElementById("fullscreenBtn");
                this.closeFullscreenBtn = document.getElementById("closeFullscreen");
            }

            bindEvents() {
                this.mainImageContainer.addEventListener("mouseenter", () => this.showZoomIndicator());
                this.mainImageContainer.addEventListener("mouseleave", () => this.hideZoomElements());
                this.mainImageContainer.addEventListener("mousemove", (e) => this.handleMouseMove(e));
                this.thumbnails.forEach((thumbnail, index) => {
                    thumbnail.addEventListener("click", () => this.selectImage(index));
                });
                this.zoomInBtn.addEventListener("click", () => this.zoomIn());
                this.zoomOutBtn.addEventListener("click", () => this.zoomOut());
                this.fullscreenBtn.addEventListener("click", () => this.openFullscreen());
                this.closeFullscreenBtn.addEventListener("click", () => this.closeFullscreen());
                this.fullscreenModal.addEventListener("click", (e) => {
                    if (e.target === this.fullscreenModal) this.closeFullscreen();
                });
                this.fullscreenImage.addEventListener("click", (e) => this.handleFullscreenZoom(e));
                document.addEventListener("keydown", (e) => this.handleKeyboard(e));
                this.mainImageContainer.addEventListener("touchstart", (e) => this.handleTouchStart(e));
                this.mainImageContainer.addEventListener("touchmove", (e) => this.handleTouchMove(e));
                this.mainImageContainer.addEventListener("touchend", () => this.hideZoomElements());
            }

            loadImages() {
                this.images = Array.from(this.thumbnails).map((thumb) => ({
                    main: thumb.dataset.src,
                    zoom: thumb.dataset.zoom,
                }));
            }

            showZoomIndicator() {
                this.zoomIndicator.classList.add("show");
                setTimeout(() => {
                    this.zoomIndicator.classList.remove("show");
                }, 2000);
            }

            handleMouseMove(e) {
                const rect = this.mainImageContainer.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                this.updateMagnifierLens(x, y);
                this.updateZoomPreview(x, y);
            }

            updateMagnifierLens(x, y) {
                const lensSize = window.innerWidth <= 768 ? 100 : 150;
                const containerWidth = this.mainImageContainer.offsetWidth;
                const containerHeight = this.mainImageContainer.offsetHeight;
                const lensX = Math.max(lensSize / 2, Math.min(x, containerWidth - lensSize / 2));
                const lensY = Math.max(lensSize / 2, Math.min(y, containerHeight - lensSize / 2));
                this.magnifierLens.style.left = lensX - lensSize / 2 + "px";
                this.magnifierLens.style.top = lensY - lensSize / 2 + "px";
                this.magnifierLens.classList.add("active");
            }

            updateZoomPreview(x, y) {
                if (window.innerWidth <= 1200) return;
                const containerWidth = this.mainImageContainer.offsetWidth;
                const containerHeight = this.mainImageContainer.offsetHeight;
                const zoomX = (x / containerWidth) * -400;
                const zoomY = (y / containerHeight) * -500;
                this.zoomPreviewImage.style.transform = `translate(${zoomX}px, ${zoomY}px) scale(2)`;
                this.zoomPreview.classList.add("active");
            }

            hideZoomElements() {
                this.magnifierLens.classList.remove("active");
                this.zoomPreview.classList.remove("active");
                this.zoomIndicator.classList.remove("show");
            }

            selectImage(index) {
                this.currentImageIndex = index;
                this.thumbnails.forEach((thumb) => thumb.classList.remove("active"));
                this.thumbnails[index].classList.add("active");
                const imageData = this.images[index];
                this.mainImage.src = imageData.main;
                this.zoomPreviewImage.src = imageData.zoom;
                this.mainImage.style.opacity = "0";
                setTimeout(() => {
                    this.mainImage.style.opacity = "1";
                }, 150);
            }

            zoomIn() {
                if (this.zoomLevel < this.maxZoom) {
                    this.zoomLevel += 0.5;
                    this.updateMainImageZoom();
                }
            }

            zoomOut() {
                if (this.zoomLevel > this.minZoom) {
                    this.zoomLevel -= 0.5;
                    this.updateMainImageZoom();
                }
            }

            updateMainImageZoom() {
                this.mainImage.style.transform = `scale(${this.zoomLevel})`;
                if (this.zoomLevel > 1) {
                    this.mainImageContainer.style.cursor = "move";
                } else {
                    this.mainImageContainer.style.cursor = "crosshair";
                }
            }

            openFullscreen() {
                const currentImage = this.images[this.currentImageIndex];
                this.fullscreenImage.src = currentImage.zoom;
                this.fullscreenModal.classList.add("active");
                document.body.style.overflow = "hidden";
            }

            closeFullscreen() {
                this.fullscreenModal.classList.remove("active");
                document.body.style.overflow = "";
                this.fullscreenZoomLevel = 1;
                this.fullscreenImage.style.transform = "scale(1)";
                this.fullscreenImage.classList.remove("zoomed");
            }

            handleFullscreenZoom(e) {
                if (this.fullscreenZoomLevel === 1) {
                    const rect = this.fullscreenImage.getBoundingClientRect();
                    const x = e.clientX - rect.left;
                    const y = e.clientY - rect.top;
                    const percentX = (x / rect.width) * 100;
                    const percentY = (y / rect.height) * 100;
                    this.fullscreenImage.style.transformOrigin = `${percentX}% ${percentY}%`;
                    this.fullscreenImage.style.transform = "scale(2)";
                    this.fullscreenImage.classList.add("zoomed");
                    this.fullscreenZoomLevel = 2;
                } else {
                    this.fullscreenImage.style.transform = "scale(1)";
                    this.fullscreenImage.classList.remove("zoomed");
                    this.fullscreenZoomLevel = 1;
                }
            }

            handleKeyboard(e) {
                if (this.fullscreenModal.classList.contains("active")) {
                    switch (e.key) {
                        case "Escape":
                            this.closeFullscreen();
                            break;
                        case "ArrowLeft":
                            this.navigateImage(-1);
                            break;
                        case "ArrowRight":
                            this.navigateImage(1);
                            break;
                    }
                }
            }

            navigateImage(direction) {
                let newIndex = this.currentImageIndex + direction;
                if (newIndex < 0) newIndex = this.images.length - 1;
                if (newIndex >= this.images.length) newIndex = 0;
                this.selectImage(newIndex);
                if (this.fullscreenModal.classList.contains("active")) {
                    this.fullscreenImage.src = this.images[newIndex].zoom;
                }
            }

            handleTouchStart(e) {
                if (e.touches.length === 1) {
                    const touch = e.touches[0];
                    const rect = this.mainImageContainer.getBoundingClientRect();
                    const x = touch.clientX - rect.left;
                    const y = touch.clientY - rect.top;
                    this.updateMagnifierLens(x, y);
                }
            }

            handleTouchMove(e) {
                e.preventDefault();
                if (e.touches.length === 1) {
                    const touch = e.touches[0];
                    const rect = this.mainImageContainer.getBoundingClientRect();
                    const x = touch.clientX - rect.left;
                    const y = touch.clientY - rect.top;
                    this.updateMagnifierLens(x, y);
                }
            }
        }

        // Tab switching function
        function showTab(tabName) {
            document.getElementById('specifications').style.display = 'none';
            document.getElementById('features').style.display = 'none';
            document.getElementById('reviews').style.display = 'none';
            document.getElementById(tabName).style.display = 'block';
            var buttons = document.querySelectorAll('.tab-btn');
            for (var i = 0; i < buttons.length; i++) {
                buttons[i].classList.remove('active');
            }
            for (var i = 0; i < buttons.length; i++) {
                if (buttons[i].getAttribute('data-tab') === tabName) {
                    buttons[i].classList.add('active');
                }
            }
            return false;
        }

        // Thumbnail selection function
        function selectThumbnail(thumbnail) {
            var index = parseInt(thumbnail.getAttribute('data-index'));
            currentImageIndex = index;
            var mainImage = document.getElementById('mainImage');
            mainImage.src = productImages[index];
            var thumbnails = document.querySelectorAll('.thumbnail');
            for (var i = 0; i < thumbnails.length; i++) {
                thumbnails[i].classList.remove('active');
            }
            thumbnail.classList.add('active');
        }

        // Helper functions
        function generateRandomStars() {
            var starsContainer = document.getElementById('randomStars');
            if (!starsContainer) return;
            var randomRating = Math.floor(Math.random() * 5) + 1;
            var starsHTML = '';
            for (var i = 1; i <= 5; i++) {
                if (i <= randomRating) {
                    starsHTML += '<span class="filled-star">★</span>';
                } else {
                    starsHTML += '<span class="empty-star">★</span>';
                }
            }
            starsContainer.innerHTML = starsHTML;
        }

        function initializeProductImages() {
            var thumbnails = document.querySelectorAll('.thumbnail img');
            productImages = [];
            for (var i = 0; i < thumbnails.length; i++) {
                productImages.push(thumbnails[i].src);
            }
            console.log('Product images initialized:', productImages);
        }

        // Review form handling
        function initializeReviewForm() {
            var reviewForm = document.getElementById('reviewForm');
            if (!reviewForm) return;
            reviewForm.addEventListener('submit', function(e) {
                e.preventDefault();
                var name = document.getElementById('reviewerName').value;
                var rating = document.querySelector('input[name="rating"]:checked');
                var title = document.getElementById('reviewTitle').value;
                var comment = document.getElementById('reviewComment').value;
                if (!name || !comment || !rating) {
                    alert('Please fill in all required fields');
                    return;
                }
                alert('Thank you for your review! It will be processed and displayed soon.');
                reviewForm.reset();
            });
        }

        // Initialize everything on page load
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM fully loaded - initializing product page');
            initializeProductImages();
            initializeReviewForm();
            new ModernProductZoomer();
            var hash = window.location.hash.substring(1);
            if (hash && ['specifications', 'features', 'reviews'].includes(hash)) {
                showTab(hash);
            } else {
                showTab('specifications');
            }
            productImages = JSON.parse('<%= JSON.stringify(product.images) %>');
            const quantityInput = document.querySelector('.quantity-input');
            const decreaseBtn = document.querySelector('.decrease-quantity');
            const increaseBtn = document.querySelector('.increase-quantity');
            const maxStock = parseInt('<%= product.stockQuantity || 0 %>', 10);
            decreaseBtn.addEventListener('click', function() {
                let value = parseInt(quantityInput.value);
                if (value > 1) {
                    quantityInput.value = value - 1;
                }
            });
            increaseBtn.addEventListener('click', function() {
                let value = parseInt(quantityInput.value);
                if (value < maxStock) {
                    quantityInput.value = value + 1;
                }
            });
            quantityInput.addEventListener('change', function() {
                let value = parseInt(this.value);
                if (isNaN(value) || value < 1) {
                    this.value = 1;
                } else if (value > maxStock) {
                    this.value = maxStock;
                }
            });
            const addToCartButton = document.querySelector('.add-to-cart');
            const cartCount = document.querySelector('.cart-count');
            addToCartButton.addEventListener('click', function() {
                if (maxStock === 0) return;
                const productId = this.getAttribute('data-product-id');
                const quantity = parseInt(quantityInput.value);
                console.log('Adding product to cart:', productId, 'Quantity:', quantity);
                let currentCount = parseInt(cartCount.textContent);
                cartCount.textContent = currentCount + quantity;
                this.textContent = 'Added to Cart';
                setTimeout(() => {
                    this.textContent = 'Add to Cart';
                }, 2000);
            });
            const urlParams = new URLSearchParams(window.location.search);
            const message = urlParams.get('message');
            if (message) {
                Swal.fire({
                    title: 'Notice',
                    text: message,
                    icon: 'info',
                    toast: true,
                    position: 'top-end',
                    timer: 3000,
                    showConfirmButton: false
                });
            }
        });
    </script>
    <!-- SweetAlert2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.all.min.js"></script>
</body>
</html>